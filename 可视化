from __future__ import unicode_literals
import xlrd
import jieba
import pyecharts
from pyecharts.globals import ThemeType
from pyecharts import options as opts
from pyecharts.charts import Bar, Page, Pie,WordCloud,Map,Funnel


# 获取最大值
def getmax(alist):
    list1=[]
    for i in alist:
        i=float(i)
        if i <= 5:
            list1.append(i)
    max=list1[0]
    for i in list1:
        if i >= max:
            max = i
    return '%.1f'%(max*10000)


# 获得最小值
def getmin(alist):
    list1=[]
    for i in alist:
        i=float(i)
        # 去掉不合理的数据
        if i <= 5 and i > 0:
            list1.append(i)
    min = list1[0]
    for i in list1:
        if i <= min:
            min = i
    return '%.1f'%(min*10000)


#获取平均值
def getavg(alist):
    list1=[]
    sum=0
    for i in alist:
        i = float(i)
        if i <= 5:
            list1.append(i)
    for i in list1:
        sum=sum+i
    avg = sum/len(list1)
    return '%.1f' %(avg*10000)


#  绘制词云
data = xlrd.open_workbook(r'房屋信息.xls')
table = data.sheets()[0]
col_0 = table.col_values(0)
#  获取列数据，0表示索引
counts={}
#  无用词列表
exclude = {" ","，",'房','2','3','出售','1','万','好','万元','平米'}

for col in col_0:
    words = jieba.lcut(col)
    for word in words:
        rword = word
        counts[rword] = counts.get(rword, 0) + 1

for word in exclude:
    del counts[word]
items = list(counts.items())
items.sort(key = lambda x:x[1],reverse=True)
word_cloud=[]
cloudcount = []
for i in range(20):
    word,count = items[i]
    word_cloud.append(word)
    cloudcount.append(count)

data_pair = [list(z) for z in zip(word_cloud, cloudcount)]
wordcloud = WordCloud(init_opts=opts.InitOpts(bg_color='#C7E0FA',chart_id=1))
# 为了方便大屏布局，需要设置id
wordcloud.set_global_opts(title_opts=opts.TitleOpts(title='热点关键词'))
wordcloud.add('关键词',data_pair=data_pair,word_size_range=[6, 66])

#  二手房所在区域分布图
data2 = xlrd.open_workbook(r'户型信息.xls')
table = data2.sheets()[0]
col2_0 = table.col_values(0)
count2={}
for place in col2_0:
    rword = place
    count2[rword] = count2.get(rword, 0) + 1
items = list(count2.items())
items.sort(key = lambda x:x[1],reverse=True)

rose=Pie(init_opts=opts.InitOpts(bg_color='#C7E0FA',chart_id=2))
rose.add('二手房所在区域', data_pair=items,
         rosetype='area', radius=["40%", "60%"],center=["50%", "50%"], is_clockwise=False
         )


#  二手房常见户型图
col2_1=table.col_values(1)
count3={}
for place in col2_1:
    rword = place
    count3[rword] = count3.get(rword, 0) + 1
items2 = list(count3.items())
items2.sort(key = lambda x:x[1],reverse=True)
items3=[]
#  只找出排行前五的户型
for i in range(0,5):
    type=items2[i]
    items3.append(type)

rose2 = Pie(init_opts=opts.InitOpts(bg_color='#C7E0FA',chart_id=3,theme=ThemeType.ROMA))
rose2.add('二手房常见户型', data_pair=items3,
         rosetype='area', radius=["40%", "60%"],center=["50%", "50%"], is_clockwise=False
         )
rose2.set_global_opts(title_opts=opts.TitleOpts(title='二手房常见户型top5'))

#  在南昌市区地图上显示的二手房分布图
map=Map(init_opts=opts.InitOpts(bg_color='#C7E0FA',chart_id=4,theme=ThemeType.ROMA))
map.add('二手房数量',data_pair=items,maptype='南昌')
map.set_global_opts(title_opts=opts.TitleOpts(title='二手房分布'), visualmap_opts=opts.VisualMapOpts(max_=500))

#  将单位房价分组
donghu=[] #东湖区
xihu=[] #西湖区
qingyun=[] #青云谱区
wanli=[] #湾里区
qingshan=[] #青山湖区
honggu=[] #红谷滩新区
gaoxin=[] #高新开发区
xinjian=[] #新建区
xian=[] #南昌县

col2_4=table.col_values(4)

for i in range(len(col2_0)):
    if col2_0[i] == '东湖区':
        donghu.append(col2_4[i])
    elif col2_0[i] == '西湖区':
        xihu.append(col2_4[i])
    elif col2_0[i] == '青云谱区':
        qingyun.append(col2_4[i])
    elif col2_0[i] == '湾里区':
        wanli.append(col2_4[i])
    elif col2_0[i] == '青山湖区':
        qingshan.append(col2_4[i])
    elif col2_0[i] == '红谷滩新区':
        honggu.append(col2_4[i])
    elif col2_0[i] == '高新开发区':
        gaoxin.append(col2_4[i])
    elif col2_0[i] == '新建区':
        xinjian.append(col2_4[i])
    elif col2_0[i] == '南昌县':
        xian.append(col2_4[i])

bary1=[]
bary2=[]
avglist=[]

for eachlist in (donghu,xihu,qingyun,wanli,qingshan,honggu,gaoxin,xinjian,xian):
    max=getmax(eachlist)
    bary1.append(max)
    min=getmin(eachlist)
    bary2.append(min)
    avg=getavg(eachlist)
    avglist.append(avg)

sum2=0
for eachavg in avglist:
    sum2=sum2+float(eachavg)
avgmark = sum2/len(avglist)

# 绘制二手房价格分布图
bar=Bar(init_opts=opts.InitOpts(bg_color='#C7E0FA',chart_id=5,theme=ThemeType.ROMA))
bar.add_xaxis(['东湖区','西湖区','青云谱区','湾里区','青山湖区','红谷滩新区','高新开发区','新建区','南昌县'])
bar.add_yaxis('最高房价',bary1)
bar.add_yaxis('最低房价',bary2)
bar.set_global_opts(title_opts=opts.TitleOpts(title='二手房价格(元/㎡)'))
bar.set_series_opts(markline_opts=opts.MarkLineOpts(data=[opts.MarkLineItem(y=avgmark, name="平均值")]))

# 绘制平均房价分布图
# 地图
place = ['东湖区','西湖区','青云谱区','湾里区','青山湖区','红谷滩新区','高新开发区','新建区','南昌县']
datapair = [list(z) for z in zip(place,avglist)]
map2=Map(init_opts=opts.InitOpts(bg_color='#C7E0FA',chart_id=6,theme=ThemeType.ROMA))
map2.add('均价(元/㎡)',data_pair=datapair,maptype='南昌')
map2.set_global_opts(title_opts=opts.TitleOpts(title='均价情况'),visualmap_opts=opts.VisualMapOpts(max_=15000,min_=5000))
# 漏斗图
funnel=Funnel(init_opts=opts.InitOpts(bg_color='#C7E0FA',chart_id=7,theme=ThemeType.ROMA))
funnel.add('均价(元/㎡)',data_pair=datapair,sort_="ascending",label_opts=opts.LabelOpts(is_show=True, position="inside"))


# 大标题
title = Pie(init_opts=opts.InitOpts(bg_color='#C7E0FA',chart_id=8))
title.set_global_opts(title_opts=opts.TitleOpts(title='南昌市在售二手房信息展示',title_textstyle_opts=opts.TextStyleOpts
(font_size=30)))


#  布局
page = Page(layout=Page.DraggablePageLayout,page_title='南昌市在售二手房信息展示')
page.add(title,rose2,map,bar,rose,map2,funnel,wordcloud)
page.render('test.html')
#  渲染
page.save_resize_html('test.html',cfg_file='chart_config.json',dest='最终展示.html')
